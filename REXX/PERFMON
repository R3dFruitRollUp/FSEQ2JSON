/* REXX */

numeric digits 256


CVT  = Get_Stor('10'x)      /* psa+15 -> cvt   */
ASCB = Get_Stor(CVT,'234'x) /* CVT+564 -> ASCB */
ASCBX = right(c2x(ASCB),8,'0')
out. = ""
out.0 = 0
do while C2D(ASCB) /= 0
  call getASCBInfo
  call getASCBDetInfo
  queue DATE('Ordered') TIME() JOBNAME TCBTIME SRBTIME ASSTIME
  ASCB = Get_Stor(ASCB,4)              /* ascb+4   -> next ascb */
  ASCBX = right(c2x(ASCB),8,'0')
end

"EXECIO * DISKW PERFDATA (FINIS "
exit

/* Functions be here! */
getASCBInfo:

DATE=DATE('U')
TIME=TIME('L')

JBNI = Get_Stor(ASCB,'AC'x)           /* ascb+ac -> jbni */
JBNS = Get_Stor(ASCB,'B0'x)           /* ascb+b0 -> jbns */

If C2D(JBNI) /= 0
  then
    JOBNAME = Get_Stor(JBNI,0,8)
  else
    JOBNAME = Get_Stor(JBNS,0,8)

ASID  = Get_Stor(ASCB,'24'x,2)        /* ascb+24 -> asid */
ASID  = c2x(ASID)
ASIDX = Right(ASID,3,'0')

ASID  = ASIDX||'(x) '||x2d(ASID)||'(d)'
SWTL  = c2x(Get_Stor(ASCB,'C4'x))     /* ascb+C4 -> swtl */
JSTL  = c2x(Get_Stor(ASCB,'50'x))     /* ascb+50 -> jstl */
INTS  = c2x(Get_Stor(ASCB,'130'x,8))  /* ascb+130 -> ints */
INTSD = c2d(Get_Stor(ASCB,'130'x,4))  /* ascb+130 -> ints */
EWST  = c2x(Get_Stor(ASCB,'48'x,8))   /* ascb+48 -> ewst */
EWSTD = c2d(Get_Stor(ASCB,'48'x))     /* ascb+48 -> ewst */
RCTF  = c2x(Get_Stor(ASCB,'66'x,1))   /* ascb+66 -> rctf */
ASSB  = Get_Stor(ASCB,'150'x)         /* ascb+150 -> assb  */
JSAB  = Get_Stor(ASSB,'A8'x)          /* assb+A8  -> jsab  */
JOBID = "SUB=MSTR"

if C2D(JSAB) /= 0
  then Do
    JOBID = Get_Stor(JSAB,20,8)     /* jsab+14  -> jobid */
    JUSERID = Get_Stor(JSAB,44,8)     /* jsab+2c  -> jsabusid */
end
  else JUSERID = 'N/A'

assbvsc  = c2d(Get_Stor(ASSB,32,4))         /*  VIO Aux pages used  */
assbnvsc = c2d(Get_Stor(ASSB,36,4))         /*  non-VIO Aux pages   */
RAX      = Get_Stor(ASCB,364,4)             /*  address of RAX      */
raxfmct  = right(c2d(Get_Stor(RAX,44,4)),8)        /*  frame count  */
raxmemlm = c2d( Get_Stor(RAX,152,8))               /*  AS mem limit */
raxmemlm = FORMAT_MEMSIZE(raxmemlm)            /* format size       */
raxlimit = c2d(Get_Stor(RAX,184,1))                /*  AS mem limit */
raxlm.    = '???'
raxlm.1   = 'SMF'
raxlm.2   = 'JCL'
raxlm.3   = 'REG0'
raxlm.4   = 'USI'
raxlm.5   = 'OMVS'
raxlm.6   = 'SETR'
raxlm.7   = 'SPW'
raxlm.8   = 'SET0'
raxlm.9   = 'AUTH'
raxlm.10  = 'URG'
raxlm.255 = 'BAD'
raxlims  = raxlm.raxlimit

raxmemlm = raxmemlm raxlims
raxmemlm = justify(raxmemlm,10)


RCTFB    = X2B(RCTF)

MYASCB   = Get_Stor('224'x)               /* PSA+224 -> psaaold */
CUREWST  = c2x(Get_Stor(MYASCB,'48'x,8))  /* ascb+48 -> ewst */
CUREWSTD = c2d(Get_Stor(MYASCB,'48'x,4))  /* ascb+48 -> ewst */

SWTLS = X2D(SWTL) * 1.048576
SWTLS = Trunc(SWTLS)

JSTLS = X2D(JSTL) * 1.048576
JSTLS = Trunc(JSTLS)

Return

Get_Stor: PROCEDURE

/*      NOTE - To make sure that this procedure will work all the   */

Parse Arg AREA,OFFSET,LENG

If Arg(2,'O') Then OFFSET=0

If Arg(3,'O') Then LENG=4

If DataType(AREA) = 'CHAR' Then Do
   AREA =  C2D(AREA)
   End

If DataType(OFFSET) = 'CHAR' Then Do
   OFFSET =  C2D(OFFSET)
   End

Return  Storage((D2X(AREA+OFFSET)),LENG)

FORMAT_MEMSIZE:
/****************************************************************/
/* The following code is used to display the storage size in    */
/* the largest possible unit.  For example, 1023G and 1025G are */
/* displayed as 1023G and 1025G, but 1024G is displayed as 1T.  */
/* The size passed to the routine must be in MB.                */
/****************************************************************/
Arg SIZE_IN_MB
Select
   When SIZE_IN_MB < 1024 then do
     MUNITS = 'M'
   End
   When SIZE_IN_MB >= 1024 & SIZE_IN_MB < 1048576 then do
     If SIZE_IN_MB/1024 == TRUNC(SIZE_IN_MB/1024) then do
       SIZE_IN_MB = SIZE_IN_MB/1024
       MUNITS = 'G'
     End
     Else MUNITS = 'M'
   End
   When SIZE_IN_MB >= 1048576 & SIZE_IN_MB < 1073741824 then do
     If SIZE_IN_MB/1048576 == TRUNC(SIZE_IN_MB/1048576) then do
       SIZE_IN_MB = SIZE_IN_MB/1048576
       MUNITS = 'T'
     End
     Else do
       SIZE_IN_MB = SIZE_IN_MB/1024
       MUNITS = 'G'
     End
   End
   When SIZE_IN_MB >= 1073741824 & ,
        SIZE_IN_MB <= 17591112302592 then do
     If SIZE_IN_MB/1073741824 == TRUNC(SIZE_IN_MB/1073741824) ,
        then do
       SIZE_IN_MB = SIZE_IN_MB/1073741824
       MUNITS = 'P'
     End
     Else do
       SIZE_IN_MB = SIZE_IN_MB/1048576
       MUNITS = 'T'
     End
   End
   When SIZE_IN_MB = 17592186040320 then do
       SIZE_IN_MB = 'NOLIM'   /* 16384P */
       MUNITS = ''
   End
   When SIZE_IN_MB > 17592186040320 then do
       SIZE_IN_MB = '*NOLIMT'   /* >16384P  (16EB) ?? */
       MUNITS = ''
   End
   Otherwise do
     Queue ' '
     Queue 'Error in FORMAT_MEMSIZE code. Contact Mark Zelden.'
     Queue 'SIZE_IN_MB=' SIZE_IN_MB
     Queue ' '
     SIZE_IN_MB = '*ERROR*'
     MUNITS = ''
   End
End /* select */
STOR_SIZE =  SIZE_IN_MB || MUNITS
Return STOR_SIZE

getASCBDetInfo:

EWSTTIM  = Copies(0,26)  /* force result length=26 */
TOD_val = X2c(EWST)
Address linkpgm "BLSUXTOD TOD_val EWSTTIM"

INTSTIM  = Copies(0,26)  /* force result length=26 */
TOD_val = X2c(INTS)
Address linkpgm "BLSUXTOD TOD_val INTSTIM"

CUREWSTT = Copies(0,26)  /* force result length=26 */
TOD_val = X2c(CUREWST)
Address linkpgm "BLSUXTOD TOD_val CUREWSTT"

If SWTL = "0D286880" | Substr(RCTFB,8,1) = "1" | JSTLS = "86400"
  Then CTD522 = "N/A"
Else Do
  CTD522  = CUREWSTD - EWSTD
  CTD522  = CTD522 * 1.048576
  CTD522  = SWTLS - Trunc(CTD522)
End

TOTTIMES = CUREWSTD - INTSD
TOTTIMES = TOTTIMES * 1.048576
TOTTIMES = Trunc(TOTTIMES)

/* Convert secs into hhhh:mm:ss  */


TIMETMP = TOTTIMES
HHHH = TIMETMP % (60*60)
TIMETMP = TIMETMP - (HHHH * 60 * 60)
MM = TIMETMP % 60
TIMETMP = TIMETMP - (MM * 60)
SS = TIMETMP


HHHH = RIGHT(HHHH,4,'0')
MM   = RIGHT(MM,2,'0')
SS   = RIGHT(SS,2,'0')

TOTTIME = HHHH":"MM":"SS


CTDIDLE = CUREWSTD - EWSTD
CTDIDLE = CTDIDLE * 1.048576
CTDIDLE = Trunc(CTDIDLE)

/* Get Accounting Info */

OUCB   = Get_Stor(ASCB,'90'x)                 /* ASCB+90 -> oucb  */
ACNT   = c2x(Get_Stor(OUCB,'1C'x,1))          /* oucb+1c -> acnt */
ACNT   = x2b(ACNT)
if substr(ACNT,8,1) /= '1'
  then do
    ACCTINFO = 'N/A'
End
Else do
  ACTL   = c2d(Get_Stor(OUCB,'67'x,1))           /* oucb+67 -> actl */
  ACTP   = Get_Stor(OUCB,'E8'x)                  /* oucb+e8 -> acnp */
  ACCTINFO = Get_Stor(ACTP,,ACTL)
  ACCTINFO = substr(ACCTINFO,2,ACTL-1)
End

/* Get CPU Time from ASCBEJST+ASCBSRBT+ASSBASST */

EJST  = Get_Stor(ASCB,'40'x,8)     /* ascb+40  -> ejst */
SRBT  = Get_Stor(ASCB,'C8'x,8)     /* ascb+c8  -> srbt */
ASST  = Get_Stor(ASSB,'160'x,8)    /* assb+160 -> srbt */

WRK = x2d('0'left(c2x(EJST),13))
TCBTIME = FORMAT(WRK/1000000, 6, 3)

WRK = x2d('0'left(c2x(SRBT),13))
SRBTIME = FORMAT(WRK/1000000, 6, 3)

WRK = x2d('0'left(c2x(ASST),13))
ASSTIME = FORMAT(WRK/1000000, 6, 3)

CPUTIME = TCBTIME + SRBTIME

Return
